package usecase

// –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –æ—Ç Telegram

type State string

const (
	StateStart        State = "start"
	StateIntro              = "intro"
	StatePurpose            = "purpose"
	StateBedrooms           = "bedrooms"
	StatePayment            = "payment"
	StateFinalMessage       = "final_message"
	StateRequestPhone       = "request_phone"
	StateLeadSaved          = "lead_saved"
)

const (
	PurposeSelf     = "–î–ª—è —Å–µ–±—è"
	PurposeRelative = "–î–ª—è –±–ª–∏–∑–∫–∏—Ö"
	PurposeInvest   = "–î–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"

	Bedrooms1     = "1 —Å–ø–∞–ª—å–Ω—è"
	Bedrooms2     = "2 —Å–ø–∞–ª—å–Ω–∏"
	Bedrooms3Plus = "3 –∏ –±–æ–ª–µ–µ —Å–ø–∞–ª–µ–Ω"

	PaymentCash        = "100% —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"
	PaymentInstallment = "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ä–∞—Å—Å—Ä–æ—á–∫–∞"
	PaymentMortgage    = "–ò–ø–æ—Ç–µ–∫–∞"
	PaymentTradeIn     = "–¢—Ä–µ–π–¥-–∏–Ω"

	StartBtn = "–•–æ—á—É"

	ChannelWhatsApp   = "–í Telegram"
	ChannelExpertCall = "–°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º"
)

type Session struct {
	State    State
	Purpose  string
	Bedrooms string
	Payment  string
	Phone    string
}

type Reply struct {
	Text           string
	Options        []string
	RemoveKeyboard bool
	AdvanceTo      State
}

type Dialog struct{}

func NewDialog() *Dialog { return &Dialog{} }

func (d *Dialog) Handle(s *Session, text string) Reply {
	if text == "/start" || s.State == StateStart {
		s.State = StateIntro
		greet := "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º. –ê–ª—å—è–Ω—Å‚Äë–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ‚Äî –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤. –ü–æ–º–æ–∂–µ–º –±—ã—Å—Ç—Ä–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã.\n\n–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–∞—Å—á—ë—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é?"
		return Reply{Text: greet, Options: []string{StartBtn}, AdvanceTo: StateIntro}
	}

	switch s.State {
	case StateIntro:
		if text == StartBtn {
			// –°—Ä–∞–∑—É –∑–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
			s.State = StatePurpose
			return Reply{Text: "–î–ª—è –∫–æ–≥–æ –≤—ã –ø–æ–¥–±–∏—Ä–∞–µ—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É?", Options: []string{PurposeSelf, PurposeRelative, PurposeInvest}, AdvanceTo: StatePurpose}
		}
		return Reply{Text: "–ù–∞–∂–º–∏—Ç–µ '–•–æ—á—É'", Options: []string{StartBtn}}

	case StatePurpose:
		if text == PurposeSelf || text == PurposeRelative || text == PurposeInvest {
			s.Purpose = text
			s.State = StateBedrooms
			return Reply{Text: "–°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?", Options: []string{Bedrooms1, Bedrooms2, Bedrooms3Plus}, AdvanceTo: StateBedrooms}
		}
		return Reply{Text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", Options: []string{PurposeSelf, PurposeRelative, PurposeInvest}}

	case StateBedrooms:
		if text == Bedrooms1 || text == Bedrooms2 || text == Bedrooms3Plus {
			s.Bedrooms = text
			s.State = StatePayment
			return Reply{Text: "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?", Options: []string{PaymentCash, PaymentInstallment, PaymentMortgage, PaymentTradeIn}, AdvanceTo: StatePayment}
		}
		return Reply{Text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω", Options: []string{Bedrooms1, Bedrooms2, Bedrooms3Plus}}

	case StatePayment:
		if text == PaymentCash || text == PaymentInstallment || text == PaymentMortgage || text == PaymentTradeIn {
			s.Payment = text
			s.State = StateFinalMessage
			return Reply{Text: "–ì–¥–µ –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É?", Options: []string{ChannelWhatsApp, ChannelExpertCall}, AdvanceTo: StateFinalMessage}
		}
		return Reply{Text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", Options: []string{PaymentCash, PaymentInstallment, PaymentMortgage, PaymentTradeIn}}

	case StateFinalMessage:
		if text == ChannelWhatsApp {
			return Reply{Text: finalTextForChannel(text), RemoveKeyboard: true, AdvanceTo: StateFinalMessage}
		}
		if text == ChannelExpertCall {
			// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä
			s.State = StateRequestPhone
			msg := finalTextForChannel(ChannelExpertCall) + "\n\n" + "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
			return Reply{Text: msg, AdvanceTo: StateRequestPhone}
		}
		return Reply{Text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª", Options: []string{ChannelWhatsApp, ChannelExpertCall}}
	}

	return Reply{Text: "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É"}
}

func finalTextForChannel(channel string) string {
	switch channel {
	case ChannelWhatsApp:
		return "–ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ê–ª—å—è–Ω—Å‚Äë–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –µ—ë –≤–∞–º –≤ Telegram."
	case ChannelExpertCall:
		return "–ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ê–ª—å—è–Ω—Å‚Äë–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏ —Ä–∞—Å—á—ë—Ç—ã –ø–æ –∏–ø–æ—Ç–µ–∫–µ/—Ä–∞—Å—Å—Ä–æ—á–∫–µ —Å —É—á—ë—Ç–æ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏–π. –í—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã üî• –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä ‚Äî –Ω–∞—à —ç–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ï—Å–ª–∏ –Ω–µ—É–¥–æ–±–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ Telegram."
	default:
		return "–°–ø–∞—Å–∏–±–æ! –ù–∞—à —ç–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
	}
}
